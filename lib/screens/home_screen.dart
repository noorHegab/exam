import 'package:carousel_slider/carousel_slider.dart';
import 'package:first_design/models/agent_model.dart';
import 'package:first_design/models/maps_model.dart';
import 'package:first_design/models/weapons_model.dart';
import 'package:first_design/screens/person_screen.dart';
import 'package:first_design/services/apis/api_manager.dart';
import 'package:first_design/services/apis/api_maps.dart';
import 'package:first_design/services/apis/api_weapons.dart';
import 'package:flutter/material.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  int selectedIndex = 0;
  Future<AgentModel>? _agentsFuture;
  Future<Autogenerated>? _mapsFuture;
  Future<Weapons>? _weaponsFuture;

  @override
  void initState() {
    super.initState();
    _agentsFuture = ApiManager().getAgents();
    _mapsFuture = ApiMaps().getMaps();
    _weaponsFuture = ApiWeapons().getWeapons();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Center(
              child: Image.asset('assets/images/Logo Icon.png'),
            ),
            const SizedBox(height: 10),
            Center(
              child: Image.asset('assets/images/Logo Text.png'),
            ),
            const SizedBox(height: 15),
            SizedBox(
              height: MediaQuery.of(context).size.height *
                  0.7, // Adjusted height to fit screen
              child: DefaultTabController(
                length: 3,
                child: Column(
                  children: [
                    TabBar(
                      indicatorColor: Colors.transparent,
                      isScrollable: false,
                      onTap: (value) {
                        setState(() {
                          selectedIndex = value;
                        });
                      },
                      tabs: List.generate(3, (index) {
                        final bool isSelected = selectedIndex == index;
                        return Tab(
                          child: Container(
                            width: 80.0,
                            padding: const EdgeInsets.all(10),
                            decoration: BoxDecoration(
                              color:
                                  isSelected ? Colors.red : Colors.transparent,
                              borderRadius: BorderRadius.circular(15),
                              border: Border.all(color: Colors.white),
                            ),
                            child: Center(
                              child: Text(
                                index == 0
                                    ? "Agents"
                                    : index == 1
                                        ? "Maps"
                                        : "Weapons",
                                style: const TextStyle(
                                  fontSize: 15.0,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.white,
                                ),
                              ),
                            ),
                          ),
                        );
                      }),
                    ),
                    const SizedBox(height: 20),
                    Expanded(
                      child: TabBarView(
                        children: [
                          // Content of Tab 1
                          FutureBuilder<AgentModel>(
                            future: _agentsFuture,
                            builder: (context, snapshot) {
                              if (snapshot.connectionState ==
                                  ConnectionState.waiting) {
                                return const Center(
                                    child: CircularProgressIndicator());
                              }
                              if (snapshot.hasError) {
                                return Center(
                                    child: Text('Error: ${snapshot.error}'));
                              }
                              if (!snapshot.hasData ||
                                  snapshot.data?.data == null) {
                                return const Center(
                                    child: Text('No agents found.'));
                              } else {
                                var agents = snapshot.data!.data!;
                                return CarouselSlider.builder(
                                  itemCount: agents.length,
                                  itemBuilder: (context, index, realIndex) {
                                    final agent = agents[index];
                                    return InkWell(
                                      onTap: () {
                                        Navigator.push(
                                            context,
                                            MaterialPageRoute(
                                                builder: (context) =>
                                                    PersonScreen(
                                                        agentModel: agent)));
                                      },
                                      child: buildPerson(
                                        hexColor1: '66376C',
                                        hexColor2: 'B1414C',
                                        image: agent.displayIcon ?? '',
                                        text: agent.displayName ?? '',
                                      ),
                                    );
                                  },
                                  options: CarouselOptions(
                                    autoPlay: true,
                                    aspectRatio: 16 / 9,
                                    enlargeCenterPage: true,
                                    viewportFraction: 0.8,
                                  ),
                                );
                              }
                            },
                          ),
                          // Content of Tab 2
                          FutureBuilder<Autogenerated>(
                            future: _mapsFuture,
                            builder: (context, snapshot) {
                              if (snapshot.connectionState ==
                                  ConnectionState.waiting) {
                                return const Center(
                                    child: CircularProgressIndicator());
                              }
                              if (snapshot.hasError) {
                                return Center(
                                    child: Text('Error: ${snapshot.error}'));
                              }
                              if (!snapshot.hasData ||
                                  snapshot.data?.data == null) {
                                return const Center(
                                    child: Text('No maps found.'));
                              } else {
                                var maps = snapshot.data?.data ?? [];
                                return ListView.builder(
                                  itemCount: maps.length,
                                  itemBuilder: (context, index) {
                                    var map = maps[index];
                                    return Stack(
                                      children: [
                                        Card(
                                          elevation:
                                              5, // Elevation for shadow effect
                                          margin: const EdgeInsets.symmetric(
                                              vertical: 10),
                                          child: ClipRRect(
                                            borderRadius: BorderRadius.circular(
                                                10), // Adjust as needed
                                            child: Container(
                                              height: 200,
                                              child: Image.network(
                                                map.displayIcon ?? '',
                                                fit: BoxFit
                                                    .cover, // Ensure image fits within bounds
                                                height:
                                                    150, // Adjust height as needed
                                                width: double
                                                    .infinity, // Fill the width of the container
                                                errorBuilder: (context, error,
                                                        stackTrace) =>
                                                    const SizedBox(
                                                  height: 150,
                                                  width: double.infinity,
                                                  child: Icon(Icons.error,
                                                      size: 40.0,
                                                      color: Colors.white),
                                                ),
                                              ),
                                            ),
                                          ),
                                        ),
                                        Padding(
                                          padding: const EdgeInsets.all(8.0),
                                          child: Text(
                                            map.displayName ?? '',
                                            style: const TextStyle(
                                              fontSize: 25.0,
                                              fontWeight: FontWeight.bold,
                                              color: Colors.black,
                                            ),
                                          ),
                                        ),
                                      ],
                                    );
                                  },
                                );
                              }
                            },
                          ),
                          // Content of Tab 3
                          FutureBuilder<Weapons>(
                            future: _weaponsFuture,
                            builder: (context, snapshot) {
                              if (snapshot.connectionState ==
                                  ConnectionState.waiting) {
                                return const Center(
                                    child: CircularProgressIndicator());
                              }
                              if (snapshot.hasError) {
                                return Center(
                                    child: Text('Error: ${snapshot.error}'));
                              }
                              if (!snapshot.hasData ||
                                  snapshot.data?.data == null) {
                                return const Center(
                                    child: Text('No weapons found.'));
                              } else {
                                var weapons = snapshot.data?.data ?? [];
                                return ListView.builder(
                                  itemCount: weapons.length,
                                  itemBuilder: (context, index) {
                                    var weapon = weapons[index];
                                    return Stack(
                                      children: [
                                        Card(
                                          elevation:
                                              5, // Elevation for shadow effect
                                          margin: const EdgeInsets.symmetric(
                                              vertical: 10),
                                          child: ClipRRect(
                                            borderRadius: BorderRadius.circular(
                                                10), // Adjust as needed
                                            child: Container(
                                              height: 200,
                                              child: Image.network(
                                                weapon.displayIcon ?? '',
                                                fit: BoxFit
                                                    .cover, // Ensure image fits within bounds
                                                height:
                                                    150, // Adjust height as needed
                                                width: double
                                                    .infinity, // Fill the width of the container
                                                errorBuilder: (context, error,
                                                        stackTrace) =>
                                                    const SizedBox(
                                                  height: 150,
                                                  width: double.infinity,
                                                  child: Icon(Icons.error,
                                                      size: 40.0,
                                                      color: Colors.white),
                                                ),
                                              ),
                                            ),
                                          ),
                                        ),
                                        Padding(
                                          padding: const EdgeInsets.all(8.0),
                                          child: Text(
                                            weapon.displayName ?? '',
                                            style: const TextStyle(
                                              fontSize: 25.0,
                                              fontWeight: FontWeight.bold,
                                              color: Colors.black,
                                            ),
                                          ),
                                        ),
                                      ],
                                    );
                                  },
                                );
                              }
                            },
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget buildPerson({
    required String hexColor1,
    required String hexColor2,
    required String image,
    required String text,
  }) {
    return Container(
      height: 300,
      width: 200,
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            Color(int.parse('0xFF$hexColor1')),
            Color(int.parse('0xFF$hexColor2')),
          ],
        ),
        borderRadius: BorderRadius.circular(15),
      ),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          image.isNotEmpty
              ? Image.network(
                  image,
                  width: MediaQuery.of(context).size.width *
                      0.3, // Responsive width
                  height: MediaQuery.of(context).size.height *
                      0.2, // Responsive height
                  fit: BoxFit.cover,
                  errorBuilder: (context, error, stackTrace) =>
                      const Icon(Icons.error, color: Colors.white),
                )
              : const Icon(Icons.image, size: 100, color: Colors.white),
          const SizedBox(height: 8),
          Text(
            text,
            style: const TextStyle(
              fontSize: 16.0,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
        ],
      ),
    );
  }
}

// import 'package:flutter/material.dart';
//
// class HomeScreen extends StatefulWidget {
//   const HomeScreen({super.key});
//
//   @override
//   State<HomeScreen> createState() => _HomeScreenState();
// }
//
// class _HomeScreenState extends State<HomeScreen> {
//   int selectedIndex = 0;
//
//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       backgroundColor: Colors.black,
//       body: Padding(
//         padding: const EdgeInsets.all(20.0), // Adjust padding as needed
//         child: Column(
//           crossAxisAlignment: CrossAxisAlignment.start,
//           children: [
//             Center(
//               child: Image.asset(
//                 'assets/images/Logo Icon.png',
//                 height: 100,
//                 width: 100,
//               ),
//             ),
//             Center(
//               child: Image.asset(
//                 'assets/images/Logo Text.png',
//                 height: 100,
//                 width: 100,
//               ),
//             ),
//             // DefaultTabController for tab management
//             DefaultTabController(
//               length: 3, // Number of tabs
//               child: Column(
//                 children: [
//                   TabBar(
//                     onTap: (value) {
//                       setState(() {
//                         selectedIndex = value;
//                       });
//                     },
//                     indicatorColor: Colors.green,
//                     labelPadding: const EdgeInsets.all(3),
//                     isScrollable: false,
//                     tabs: [
//                       Tab(
//                         child: Container(
//                           padding: const EdgeInsets.all(5),
//                           decoration: BoxDecoration(
//                             color: selectedIndex == 0
//                                 ? Colors.green
//                                 : Colors.white,
//                             borderRadius: BorderRadius.circular(15),
//                             border: Border.all(color: Colors.green),
//                           ),
//                           child: Text(
//                             "Tab 1",
//                             style: TextStyle(
//                               color: selectedIndex == 0
//                                   ? Colors.white
//                                   : Colors.green,
//                             ),
//                           ),
//                         ),
//                       ),
//                       Tab(
//                         child: Container(
//                           padding: const EdgeInsets.all(5),
//                           decoration: BoxDecoration(
//                             color: selectedIndex == 1
//                                 ? Colors.green
//                                 : Colors.white,
//                             borderRadius: BorderRadius.circular(15),
//                             border: Border.all(color: Colors.green),
//                           ),
//                           child: Text(
//                             "Tab 2",
//                             style: TextStyle(
//                               color: selectedIndex == 1
//                                   ? Colors.white
//                                   : Colors.green,
//                             ),
//                           ),
//                         ),
//                       ),
//                       Tab(
//                         child: Container(
//                           padding: const EdgeInsets.all(5),
//                           decoration: BoxDecoration(
//                             color: selectedIndex == 2
//                                 ? Colors.green
//                                 : Colors.white,
//                             borderRadius: BorderRadius.circular(15),
//                             border: Border.all(color: Colors.green),
//                           ),
//                           child: Text(
//                             "Tab 3",
//                             style: TextStyle(
//                               color: selectedIndex == 2
//                                   ? Colors.white
//                                   : Colors.green,
//                             ),
//                           ),
//                         ),
//                       ),
//                     ],
//                   ),
//                   const SizedBox(height: 20),
//                   // Expanded to fill remaining space
//                   Expanded(
//                     child: TabBarView(
//                       children: [
//                         Center(child: Text("Content for Tab 1")),
//                         Center(child: Text("Content for Tab 2")),
//                         Center(child: Text("Content for Tab 3")),
//                       ],
//                     ),
//                   ),
//                 ],
//               ),
//             ),
//           ],
//         ),
//       ),
//     );
//   }
// }
